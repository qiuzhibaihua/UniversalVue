{"remainingRequest":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robert/project/vue/UniversalVue/UniversalVue/src/components/ScrollPane/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/src/components/ScrollPane/index.vue","mtime":1584947584987},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\nconst padding = 15 // tag's padding\n\nexport default {\n  name: 'scrollPane',\n  data() {\n    return {\n      left: 0\n    }\n  },\n  methods: {\n    handleScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 3\n      const $container = this.$refs.scrollContainer\n      const $containerWidth = $container.offsetWidth\n      const $wrapper = this.$refs.scrollWrapper\n      const $wrapperWidth = $wrapper.offsetWidth\n\n      if (eventDelta > 0) {\n        this.left = Math.min(0, this.left + eventDelta)\n      } else {\n        if ($containerWidth - padding < $wrapperWidth) {\n          if (this.left < -($wrapperWidth - $containerWidth + padding)) {\n            this.left = this.left\n          } else {\n            this.left = Math.max(this.left + eventDelta, $containerWidth - $wrapperWidth - padding)\n          }\n        } else {\n          this.left = 0\n        }\n      }\n    },\n    moveToTarget($target) {\n      const $container = this.$refs.scrollContainer\n      const $containerWidth = $container.offsetWidth\n      const $targetLeft = $target.offsetLeft\n      const $targetWidth = $target.offsetWidth\n\n      if ($targetLeft < -this.left) {\n        // tag in the left\n        this.left = -$targetLeft + padding\n      } else if ($targetLeft + padding > -this.left && $targetLeft + $targetWidth < -this.left + $containerWidth - padding) {\n        // tag in the current view\n        // eslint-disable-line\n      } else {\n        // tag in the right\n        this.left = -($targetLeft - ($containerWidth - $targetWidth) + padding)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;AASA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/ScrollPane","sourcesContent":["<template>\n  <div class=\"scroll-container\" ref=\"scrollContainer\" @wheel.prevent=\"handleScroll\">\n    <div class=\"scroll-wrapper\" ref=\"scrollWrapper\" :style=\"{left: left + 'px'}\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\nconst padding = 15 // tag's padding\n\nexport default {\n  name: 'scrollPane',\n  data() {\n    return {\n      left: 0\n    }\n  },\n  methods: {\n    handleScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 3\n      const $container = this.$refs.scrollContainer\n      const $containerWidth = $container.offsetWidth\n      const $wrapper = this.$refs.scrollWrapper\n      const $wrapperWidth = $wrapper.offsetWidth\n\n      if (eventDelta > 0) {\n        this.left = Math.min(0, this.left + eventDelta)\n      } else {\n        if ($containerWidth - padding < $wrapperWidth) {\n          if (this.left < -($wrapperWidth - $containerWidth + padding)) {\n            this.left = this.left\n          } else {\n            this.left = Math.max(this.left + eventDelta, $containerWidth - $wrapperWidth - padding)\n          }\n        } else {\n          this.left = 0\n        }\n      }\n    },\n    moveToTarget($target) {\n      const $container = this.$refs.scrollContainer\n      const $containerWidth = $container.offsetWidth\n      const $targetLeft = $target.offsetLeft\n      const $targetWidth = $target.offsetWidth\n\n      if ($targetLeft < -this.left) {\n        // tag in the left\n        this.left = -$targetLeft + padding\n      } else if ($targetLeft + padding > -this.left && $targetLeft + $targetWidth < -this.left + $containerWidth - padding) {\n        // tag in the current view\n        // eslint-disable-line\n      } else {\n        // tag in the right\n        this.left = -($targetLeft - ($containerWidth - $targetWidth) + padding)\n      }\n    }\n  }\n}\n</script>\n\n<style rel=\"stylesheet/scss\" lang=\"scss\" scoped>\n.scroll-container {\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  .scroll-wrapper {\n    position: absolute;\n  }\n}\n</style>\n"]}]}