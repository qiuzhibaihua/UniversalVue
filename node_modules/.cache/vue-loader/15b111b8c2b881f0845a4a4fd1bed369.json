{"remainingRequest":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/robert/project/vue/UniversalVue/UniversalVue/src/views/sys/menu/components/table-tree-column/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/src/views/sys/menu/components/table-tree-column/index.vue","mtime":1584947585008},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport isArray from 'lodash/isArray'\nexport default {\n  name: 'table-tree-column',\n  props: {\n    prop: {\n      type: String\n    },\n    treeKey: {\n      type: String,\n      default: 'id'\n    },\n    parentKey: {\n      type: String,\n      default: 'parentId'\n    },\n    levelKey: {\n      type: String,\n      default: '_level'\n    },\n    childKey: {\n      type: String,\n      default: 'children'\n    }\n  },\n  methods: {\n    childStyles (row) {\n      return { 'padding-left': (row[this.levelKey] > 1 ? row[this.levelKey] * 7 : 0) + 'px' }\n    },\n    iconClasses (row) {\n      return [ !row._expanded ? 'el-icon-caret-right' : 'el-icon-caret-bottom' ]\n    },\n    iconStyles (row) {\n      return { 'visibility': this.hasChild(row) ? 'visible' : 'hidden' }\n    },\n    hasChild (row) {\n      return (isArray(row[this.childKey]) && row[this.childKey].length >= 1) || false\n    },\n    // 切换处理\n    toggleHandle (index, row) {\n      if (this.hasChild(row)) {\n        var data = this.$parent.store.states.data.slice(0)\n        data[index]._expanded = !data[index]._expanded\n        if (data[index]._expanded) {\n          data = data.splice(0, index + 1).concat(row[this.childKey]).concat(data)\n        } else {\n          data = this.removeChildNode(data, row[this.treeKey])\n        }\n        this.$parent.store.commit('setData', data)\n        this.$nextTick(() => {\n          this.$parent.doLayout()\n        })\n      }\n    },\n    // 移除子节点\n    removeChildNode (data, parentId) {\n      var parentIds = isArray(parentId) ? parentId : [parentId]\n      if (parentId.length <= 0) {\n        return data\n      }\n      var ids = []\n      for (var i = 0; i < data.length; i++) {\n        if (parentIds.indexOf(data[i][this.parentKey]) !== -1 && parentIds.indexOf(data[i][this.treeKey]) === -1) {\n          ids.push(data.splice(i, 1)[0][this.treeKey])\n          i--\n        }\n      }\n      return this.removeChildNode(data, ids)\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/sys/menu/components/table-tree-column","sourcesContent":["<template>\n  <el-table-column :prop=\"prop\" v-bind=\"$attrs\">\n    <template slot-scope=\"scope\">\n      <span @click.prevent=\"toggleHandle(scope.$index, scope.row)\" :style=\"childStyles(scope.row)\">\n        <i :class=\"iconClasses(scope.row)\" :style=\"iconStyles(scope.row)\"></i>\n        {{ scope.row[prop] }}\n      </span>\n    </template>\n  </el-table-column>\n</template>\n\n<script>\n  import isArray from 'lodash/isArray'\n  export default {\n    name: 'table-tree-column',\n    props: {\n      prop: {\n        type: String\n      },\n      treeKey: {\n        type: String,\n        default: 'id'\n      },\n      parentKey: {\n        type: String,\n        default: 'parentId'\n      },\n      levelKey: {\n        type: String,\n        default: '_level'\n      },\n      childKey: {\n        type: String,\n        default: 'children'\n      }\n    },\n    methods: {\n      childStyles (row) {\n        return { 'padding-left': (row[this.levelKey] > 1 ? row[this.levelKey] * 7 : 0) + 'px' }\n      },\n      iconClasses (row) {\n        return [ !row._expanded ? 'el-icon-caret-right' : 'el-icon-caret-bottom' ]\n      },\n      iconStyles (row) {\n        return { 'visibility': this.hasChild(row) ? 'visible' : 'hidden' }\n      },\n      hasChild (row) {\n        return (isArray(row[this.childKey]) && row[this.childKey].length >= 1) || false\n      },\n      // 切换处理\n      toggleHandle (index, row) {\n        if (this.hasChild(row)) {\n          var data = this.$parent.store.states.data.slice(0)\n          data[index]._expanded = !data[index]._expanded\n          if (data[index]._expanded) {\n            data = data.splice(0, index + 1).concat(row[this.childKey]).concat(data)\n          } else {\n            data = this.removeChildNode(data, row[this.treeKey])\n          }\n          this.$parent.store.commit('setData', data)\n          this.$nextTick(() => {\n            this.$parent.doLayout()\n          })\n        }\n      },\n      // 移除子节点\n      removeChildNode (data, parentId) {\n        var parentIds = isArray(parentId) ? parentId : [parentId]\n        if (parentId.length <= 0) {\n          return data\n        }\n        var ids = []\n        for (var i = 0; i < data.length; i++) {\n          if (parentIds.indexOf(data[i][this.parentKey]) !== -1 && parentIds.indexOf(data[i][this.treeKey]) === -1) {\n            ids.push(data.splice(i, 1)[0][this.treeKey])\n            i--\n          }\n        }\n        return this.removeChildNode(data, ids)\n      }\n    }\n  }\n</script>\n"]}]}