{"remainingRequest":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js!/Users/robert/project/vue/UniversalVue/UniversalVue/src/utils/request.js","dependencies":[{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/src/utils/request.js","mtime":1585106034561},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport { Message } from 'element-ui';\nimport store from \"../store\";\nimport { getToken } from '@/utils/auth'; // 创建axios实例\n\nvar service = axios.create({\n  baseURL: process.env.NODE_ENV === 'production' ? process.env.VUE_APP_BASE_API : '/api',\n  // api的base_url\n  timeout: 10000 // 请求超时时间\n\n}); // request拦截器\n\nservice.interceptors.request.use(function (config) {\n  if (store.getters.token) {\n    config.headers['token'] = getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  return config;\n}, function (error) {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // respone interceptor\n\nservice.interceptors.response.use(function (response) {\n  var res = response.data;\n\n  if (res.code === 401) {\n    store.dispatch('FedLogOut').then(function () {\n      location.reload();\n    });\n  } else {\n    return response;\n  }\n},\n/**\n* 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页\n* 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中\n*/\n//  const res = response.data;\n//     if (res.code !== 20000) {\n//       Message({\n//         message: res.message,\n//         type: 'error',\n//         duration: 5 * 1000\n//       });\n//       // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n//       if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n//         MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n//           confirmButtonText: '重新登录',\n//           cancelButtonText: '取消',\n//           type: 'warning'\n//         }).then(() => {\n//           store.dispatch('FedLogOut').then(() => {\n//             location.reload();// 为了重新实例化vue-router对象 避免bug\n//           });\n//         })\n//       }\n//       return Promise.reject('error');\n//     } else {\n//       return response.data;\n//     }\nfunction (error) {\n  console.log('err' + error); // for debug\n\n  Message({\n    message: error.message,\n    // ,\n    type: 'error',\n    duration: 10 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["/Users/robert/project/vue/UniversalVue/UniversalVue/src/utils/request.js"],"names":["axios","Message","store","getToken","service","create","baseURL","process","env","NODE_ENV","VUE_APP_BASE_API","timeout","interceptors","request","use","config","getters","token","headers","error","console","log","Promise","reject","response","res","data","code","dispatch","then","location","reload","message","type","duration"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,KAAP;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CAEA;;AACA,IAAMC,OAAO,GAAGJ,KAAK,CAACK,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAuB,YAAvB,GAAoCF,OAAO,CAACC,GAAR,CAAYE,gBAAhD,GAAiE,MAD/C;AACuD;AAClFC,EAAAA,OAAO,EAAE,KAFkB,CAEZ;;AAFY,CAAb,CAAhB,C,CAKA;;AACAP,OAAO,CAACQ,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiC,UAAAC,MAAM,EAAI;AACzC,MAAIb,KAAK,CAACc,OAAN,CAAcC,KAAlB,EAAyB;AACvBF,IAAAA,MAAM,CAACG,OAAP,CAAe,OAAf,IAA0Bf,QAAQ,EAAlC,CADuB,CACc;AACtC;;AACD,SAAOY,MAAP;AACD,CALD,EAKG,UAAAI,KAAK,EAAI;AACV;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAFU,CAES;;AACnBG,EAAAA,OAAO,CAACC,MAAR,CAAeJ,KAAf;AACD,CATD,E,CAWA;;AACAf,OAAO,CAACQ,YAAR,CAAqBY,QAArB,CAA8BV,GAA9B,CACE,UAAAU,QAAQ,EAAI;AACV,MAAMC,GAAG,GAAGD,QAAQ,CAACE,IAArB;;AACA,MAAID,GAAG,CAACE,IAAJ,KAAa,GAAjB,EAAsB;AACpBzB,IAAAA,KAAK,CAAC0B,QAAN,CAAe,WAAf,EAA4BC,IAA5B,CAAiC,YAAM;AACrCC,MAAAA,QAAQ,CAACC,MAAT;AACD,KAFD;AAGD,GAJD,MAIO;AACL,WAAOP,QAAP;AACD;AACF,CAVH;AAWE;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAAL,KAAK,EAAI;AACPC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAQF,KAApB,EADO,CACmB;;AAC1BlB,EAAAA,OAAO,CAAC;AACN+B,IAAAA,OAAO,EAAEb,KAAK,CAACa,OADT;AACkB;AACxBC,IAAAA,IAAI,EAAE,OAFA;AAGNC,IAAAA,QAAQ,EAAE,KAAK;AAHT,GAAD,CAAP;AAKA,SAAOZ,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACD,CA9CH;AAgDA,eAAef,OAAf","sourcesContent":["import axios from 'axios'\nimport { Message } from 'element-ui'\nimport store from '../store'\nimport { getToken } from '@/utils/auth'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: process.env.NODE_ENV==='production'?process.env.VUE_APP_BASE_API:'/api', // api的base_url\n  timeout: 10000 // 请求超时时间\n})\n\n// request拦截器\nservice.interceptors.request.use(config => {\n  if (store.getters.token) {\n    config.headers['token'] = getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  return config\n}, error => {\n  // Do something with request error\n  console.log(error) // for debug\n  Promise.reject(error)\n})\n\n// respone interceptor\nservice.interceptors.response.use(\n  response => {\n    const res = response.data\n    if (res.code === 401) {\n      store.dispatch('FedLogOut').then(() => {\n        location.reload()\n      })\n    } else {\n      return response\n    }\n  },\n  /**\n  * 下面的注释为通过response自定义code来标示请求状态，当code返回如下情况为权限有问题，登出并返回到登录页\n  * 如通过xmlhttprequest 状态码标识 逻辑可写在下面error中\n  */\n  //  const res = response.data;\n  //     if (res.code !== 20000) {\n  //       Message({\n  //         message: res.message,\n  //         type: 'error',\n  //         duration: 5 * 1000\n  //       });\n  //       // 50008:非法的token; 50012:其他客户端登录了;  50014:Token 过期了;\n  //       if (res.code === 50008 || res.code === 50012 || res.code === 50014) {\n  //         MessageBox.confirm('你已被登出，可以取消继续留在该页面，或者重新登录', '确定登出', {\n  //           confirmButtonText: '重新登录',\n  //           cancelButtonText: '取消',\n  //           type: 'warning'\n  //         }).then(() => {\n  //           store.dispatch('FedLogOut').then(() => {\n  //             location.reload();// 为了重新实例化vue-router对象 避免bug\n  //           });\n  //         })\n  //       }\n  //       return Promise.reject('error');\n  //     } else {\n  //       return response.data;\n  //     }\n  error => {\n    console.log('err' + error)// for debug\n    Message({\n      message: error.message, // ,\n      type: 'error',\n      duration: 10 * 1000\n    })\n    return Promise.reject(error)\n  })\n\nexport default service\n"]}]}