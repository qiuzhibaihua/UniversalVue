{"remainingRequest":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js!/Users/robert/project/vue/UniversalVue/UniversalVue/src/store/modules/tagsView.js","dependencies":[{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/src/store/modules/tagsView.js","mtime":1584947584997},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _toConsumableArray from \"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.function.name\";\nvar tagsView = {\n  state: {\n    visitedViews: [],\n    cachedViews: []\n  },\n  mutations: {\n    ADD_VISITED_VIEWS: function ADD_VISITED_VIEWS(state, view) {\n      if (state.visitedViews.some(function (v) {\n        return v.path === view.path;\n      })) return;\n      state.visitedViews.push(Object.assign({}, view, {\n        title: view.meta.title || 'no-name'\n      }));\n\n      if (!view.meta.noCache) {\n        state.cachedViews.push(view.name);\n      }\n    },\n    DEL_VISITED_VIEWS: function DEL_VISITED_VIEWS(state, view) {\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = state.visitedViews.entries()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              i = _step$value[0],\n              v = _step$value[1];\n\n          if (v.path === view.path) {\n            state.visitedViews.splice(i, 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = state.cachedViews[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var _i = _step2.value;\n\n          if (_i === view.name) {\n            var index = state.cachedViews.indexOf(_i);\n            state.cachedViews.splice(index, 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    },\n    DEL_OTHERS_VIEWS: function DEL_OTHERS_VIEWS(state, view) {\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = state.visitedViews.entries()[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              i = _step3$value[0],\n              v = _step3$value[1];\n\n          if (v.path === view.path) {\n            state.visitedViews = state.visitedViews.slice(i, i + 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = state.cachedViews[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var _i2 = _step4.value;\n\n          if (_i2 === view.name) {\n            var index = state.cachedViews.indexOf(_i2);\n            state.cachedViews = state.cachedViews.slice(index, _i2 + 1);\n            break;\n          }\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n    },\n    DEL_ALL_VIEWS: function DEL_ALL_VIEWS(state) {\n      state.visitedViews = [];\n      state.cachedViews = [];\n    }\n  },\n  actions: {\n    addVisitedViews: function addVisitedViews(_ref, view) {\n      var commit = _ref.commit;\n      commit('ADD_VISITED_VIEWS', view);\n    },\n    delVisitedViews: function delVisitedViews(_ref2, view) {\n      var commit = _ref2.commit,\n          state = _ref2.state;\n      return new Promise(function (resolve) {\n        commit('DEL_VISITED_VIEWS', view);\n        resolve(_toConsumableArray(state.visitedViews));\n      });\n    },\n    delOthersViews: function delOthersViews(_ref3, view) {\n      var commit = _ref3.commit,\n          state = _ref3.state;\n      return new Promise(function (resolve) {\n        commit('DEL_OTHERS_VIEWS', view);\n        resolve(_toConsumableArray(state.visitedViews));\n      });\n    },\n    delAllViews: function delAllViews(_ref4) {\n      var commit = _ref4.commit,\n          state = _ref4.state;\n      return new Promise(function (resolve) {\n        commit('DEL_ALL_VIEWS');\n        resolve(_toConsumableArray(state.visitedViews));\n      });\n    }\n  }\n};\nexport default tagsView;",{"version":3,"sources":["/Users/robert/project/vue/UniversalVue/UniversalVue/src/store/modules/tagsView.js"],"names":["tagsView","state","visitedViews","cachedViews","mutations","ADD_VISITED_VIEWS","view","some","v","path","push","Object","assign","title","meta","noCache","name","DEL_VISITED_VIEWS","entries","i","splice","index","indexOf","DEL_OTHERS_VIEWS","slice","DEL_ALL_VIEWS","actions","addVisitedViews","commit","delVisitedViews","Promise","resolve","delOthersViews","delAllViews"],"mappings":"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","sourcesContent":["const tagsView = {\n  state: {\n    visitedViews: [],\n    cachedViews: []\n  },\n  mutations: {\n    ADD_VISITED_VIEWS: (state, view) => {\n      if (state.visitedViews.some(v => v.path === view.path)) return\n      state.visitedViews.push(Object.assign({}, view, {\n        title: view.meta.title || 'no-name'\n      }))\n      if (!view.meta.noCache) {\n        state.cachedViews.push(view.name)\n      }\n    },\n    DEL_VISITED_VIEWS: (state, view) => {\n      for (const [i, v] of state.visitedViews.entries()) {\n        if (v.path === view.path) {\n          state.visitedViews.splice(i, 1)\n          break\n        }\n      }\n      for (const i of state.cachedViews) {\n        if (i === view.name) {\n          const index = state.cachedViews.indexOf(i)\n          state.cachedViews.splice(index, 1)\n          break\n        }\n      }\n    },\n    DEL_OTHERS_VIEWS: (state, view) => {\n      for (const [i, v] of state.visitedViews.entries()) {\n        if (v.path === view.path) {\n          state.visitedViews = state.visitedViews.slice(i, i + 1)\n          break\n        }\n      }\n      for (const i of state.cachedViews) {\n        if (i === view.name) {\n          const index = state.cachedViews.indexOf(i)\n          state.cachedViews = state.cachedViews.slice(index, i + 1)\n          break\n        }\n      }\n    },\n    DEL_ALL_VIEWS: (state) => {\n      state.visitedViews = []\n      state.cachedViews = []\n    }\n  },\n  actions: {\n    addVisitedViews({ commit }, view) {\n      commit('ADD_VISITED_VIEWS', view)\n    },\n    delVisitedViews({ commit, state }, view) {\n      return new Promise((resolve) => {\n        commit('DEL_VISITED_VIEWS', view)\n        resolve([...state.visitedViews])\n      })\n    },\n    delOthersViews({ commit, state }, view) {\n      return new Promise((resolve) => {\n        commit('DEL_OTHERS_VIEWS', view)\n        resolve([...state.visitedViews])\n      })\n    },\n    delAllViews({ commit, state }) {\n      return new Promise((resolve) => {\n        commit('DEL_ALL_VIEWS')\n        resolve([...state.visitedViews])\n      })\n    }\n  }\n}\n\nexport default tagsView\n"]}]}