{"remainingRequest":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js!/Users/robert/project/vue/UniversalVue/UniversalVue/src/views/layout/mixin/ResizeHandler.js","dependencies":[{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/src/views/layout/mixin/ResizeHandler.js","mtime":1584947585003},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/robert/project/vue/UniversalVue/UniversalVue/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import store from '@/store';\nvar _document = document,\n    body = _document.body;\nvar WIDTH = 1024;\nvar RATIO = 3;\nexport default {\n  watch: {\n    $route: function $route(route) {\n      if (this.device === 'mobile' && this.sidebar.opened) {\n        store.dispatch('CloseSideBar', {\n          withoutAnimation: false\n        });\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    window.addEventListener('resize', this.resizeHandler);\n  },\n  mounted: function mounted() {\n    var isMobile = this.isMobile();\n\n    if (isMobile) {\n      store.dispatch('ToggleDevice', 'mobile');\n      store.dispatch('CloseSideBar', {\n        withoutAnimation: true\n      });\n    }\n  },\n  methods: {\n    isMobile: function isMobile() {\n      var rect = body.getBoundingClientRect();\n      return rect.width - RATIO < WIDTH;\n    },\n    resizeHandler: function resizeHandler() {\n      if (!document.hidden) {\n        var isMobile = this.isMobile();\n        store.dispatch('ToggleDevice', isMobile ? 'mobile' : 'desktop');\n\n        if (isMobile) {\n          store.dispatch('CloseSideBar', {\n            withoutAnimation: true\n          });\n        }\n      }\n    }\n  }\n};",{"version":3,"sources":["/Users/robert/project/vue/UniversalVue/UniversalVue/src/views/layout/mixin/ResizeHandler.js"],"names":["store","document","body","WIDTH","RATIO","watch","$route","route","device","sidebar","opened","dispatch","withoutAnimation","beforeMount","window","addEventListener","resizeHandler","mounted","isMobile","methods","rect","getBoundingClientRect","width","hidden"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;gBAEiBC,Q;IAATC,I,aAAAA,I;AACR,IAAMC,KAAK,GAAG,IAAd;AACA,IAAMC,KAAK,GAAG,CAAd;AAEA,eAAe;AACbC,EAAAA,KAAK,EAAE;AACLC,IAAAA,MADK,kBACEC,KADF,EACS;AACZ,UAAI,KAAKC,MAAL,KAAgB,QAAhB,IAA4B,KAAKC,OAAL,CAAaC,MAA7C,EAAqD;AACnDV,QAAAA,KAAK,CAACW,QAAN,CAAe,cAAf,EAA+B;AAAEC,UAAAA,gBAAgB,EAAE;AAApB,SAA/B;AACD;AACF;AALI,GADM;AAQbC,EAAAA,WARa,yBAQC;AACZC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,aAAvC;AACD,GAVY;AAWbC,EAAAA,OAXa,qBAWH;AACR,QAAMC,QAAQ,GAAG,KAAKA,QAAL,EAAjB;;AACA,QAAIA,QAAJ,EAAc;AACZlB,MAAAA,KAAK,CAACW,QAAN,CAAe,cAAf,EAA+B,QAA/B;AACAX,MAAAA,KAAK,CAACW,QAAN,CAAe,cAAf,EAA+B;AAAEC,QAAAA,gBAAgB,EAAE;AAApB,OAA/B;AACD;AACF,GAjBY;AAkBbO,EAAAA,OAAO,EAAE;AACPD,IAAAA,QADO,sBACI;AACT,UAAME,IAAI,GAAGlB,IAAI,CAACmB,qBAAL,EAAb;AACA,aAAOD,IAAI,CAACE,KAAL,GAAalB,KAAb,GAAqBD,KAA5B;AACD,KAJM;AAKPa,IAAAA,aALO,2BAKS;AACd,UAAI,CAACf,QAAQ,CAACsB,MAAd,EAAsB;AACpB,YAAML,QAAQ,GAAG,KAAKA,QAAL,EAAjB;AACAlB,QAAAA,KAAK,CAACW,QAAN,CAAe,cAAf,EAA+BO,QAAQ,GAAG,QAAH,GAAc,SAArD;;AAEA,YAAIA,QAAJ,EAAc;AACZlB,UAAAA,KAAK,CAACW,QAAN,CAAe,cAAf,EAA+B;AAAEC,YAAAA,gBAAgB,EAAE;AAApB,WAA/B;AACD;AACF;AACF;AAdM;AAlBI,CAAf","sourcesContent":["import store from '@/store'\n\nconst { body } = document\nconst WIDTH = 1024\nconst RATIO = 3\n\nexport default {\n  watch: {\n    $route(route) {\n      if (this.device === 'mobile' && this.sidebar.opened) {\n        store.dispatch('CloseSideBar', { withoutAnimation: false })\n      }\n    }\n  },\n  beforeMount() {\n    window.addEventListener('resize', this.resizeHandler)\n  },\n  mounted() {\n    const isMobile = this.isMobile()\n    if (isMobile) {\n      store.dispatch('ToggleDevice', 'mobile')\n      store.dispatch('CloseSideBar', { withoutAnimation: true })\n    }\n  },\n  methods: {\n    isMobile() {\n      const rect = body.getBoundingClientRect()\n      return rect.width - RATIO < WIDTH\n    },\n    resizeHandler() {\n      if (!document.hidden) {\n        const isMobile = this.isMobile()\n        store.dispatch('ToggleDevice', isMobile ? 'mobile' : 'desktop')\n\n        if (isMobile) {\n          store.dispatch('CloseSideBar', { withoutAnimation: true })\n        }\n      }\n    }\n  }\n}\n"]}]}